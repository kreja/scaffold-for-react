{ // http://eslint.cn/docs/user-guide/configuring
  // ESLint 会在所有父级目录里寻找配置文件,设置根目录停止在父级目录中寻找
  "root": true,
  // 全局变量
  "env": {
    "browser": true,
    "node": true,
    "es6": true,
    "amd": true,
    "commonjs": true
  },
  "plugins": [
    // 插件地址 https://github.com/yannickcr/eslint-plugin-react
    "react"
  ],
  "parserOptions": {
    // 基于 eslint@2.x
    "sourceType": "module",
    "ecmaVersion": 6,
    "ecmaFeatures": {
      // 迁移说明: http://eslint.org/docs/user-guide/migrating-to-2.0.0
      "jsx": true
    }
  },
  // 额外的语言特性
  "ecmaFeatures": {
    // 是否支持箭头函数
    "arrowFunctions": true,
    // 是否支持 let 和 const
    "blockBindings": true,
    // 是否支持 class
    "classes": true,
    // 是否支持
    "defaultParams": true,
    // 是否支持对象析构
    "destructuring": true,
    // 是否支持 for-of 语法
    "forOf": true,
    // 是否支持 计算属性名称 var lastName = "last name"; person[lastName] = "Zakas";
    "objectLiteralComputedProperties": true,
    // 是否支持缩短方法名 sayName: function() { => sayName() {
    "objectLiteralShorthandMethods": true,
    // 是否支持缩短对象名 name: name, => name,
    "objectLiteralShorthandProperties": true,
    // 是否支持 spread
    "spread": true,
    // 是否支持函数里调用 super
    "superInFunctions": true,
    // 是否支持 ES6 模板语法
    "templateStrings": true
  },
  // 若有其他全局变量，可自行在对应文件里设置：/*global var1, var2*/
  "globals": {
    "ReactDOM": true,
    "React": true,
    "define": true,
    "require": true,
    "module": true,
    "$": false,
    "_": false
  },
  // 启用的规则及各自的错误级别
  // "off" or 0 - turn the rule off
  // "warn" or 1 - turn the rule on as a warning
  // "error" or 2 - turn the rule on as an error
  "rules": {
    /**
     * Possible Errors
     */
    // 拖尾逗号
    "comma-dangle": [2, "never"],
    // 禁用不必要的分号
    "no-extra-semi": 0,
    // 禁止在嵌套的语句块中出现变量或 function 声明
    "no-inner-declarations": 2,
    // 强制 typeof 表达式与有效的字符串进行比较
    "valid-typeof": 2,

    /**
     * 最佳实践
     */
    "strict": [
      0,
      "global"
    ],
    "global-strict": [
      0,
      "always"
    ],
    // 要求 Switch 语句中有 Default 分支
    "default-case": 1,
    // deprecated rule, 忽略，采用上面规则限制
    "no-extra-strict": 0,
    "no-shadow": 1,
    // 局部变量和外层变量重名
    "no-unused-vars": [
      1,
      {
        // 局部变量未使用
        "vars": "local",
        "args": "after-used"
      }
    ],
    // 禁用 with 语句
    "no-with": 2,
    // 禁止与 null 进行比较
    "no-eq-null": 2,
    // 禁用隐式的eval()
    "no-implied-eval": 2,
    "no-undef": 1,
    // 未使用的表达式
    "no-unused-expressions": 1,
    // 允许定义前使用
    "no-use-before-define": 0,
    "yoda": 0,
    "eqeqeq": 0,
    // 允许 new 创建的对象没有被引用
    "no-new": 0,
    // 允许没有 return
    "consistent-return": 0,
    // 操作对象属性时，优先使用 . 操作
    "dot-notation": [
      2,
      {
        "allowKeywords": true
      }
    ],
    // 阻止复写内置类型
    "no-native-reassign": 1,
    // 是否允许 return 返回表达式
    "no-return-assign": 1,
    // 提示拒绝使用已经明确意义的判断条件 if (true)
    "no-constant-condition": 1,
    "max-len": [
      1,
      80,
      2,
      {
        "ignoreComments": true,
        "ignoreUrls": true
      }
    ],
    "no-caller": 1,
    // nodejs 环境规则
    "no-loop-func": 1,
    // 代码禁止出现 console
    "no-console": 1,
    // 代码禁止出现 debugger
    "no-debugger": 1,
    // try catch 捕获的变量名禁止重名定义
    "no-catch-shadow": 2,
    // require 前面是否能添加 new
    "no-new-require": 0,
    // 是否合并 var requires
    "no-mixed-requires": [
      0,
      false
    ],
    // 是否可以自行拼接 path 还是必须要引用 path 模块
    "no-path-concat": 0,
    // 代码里面是否有处理 err 的逻辑？
    "handle-callback-err": 0,

    /**
     * 代码风格
     */
    // 允许空 block 语句
    "no-empty": 0,
    // 缩进
    "indent": [
      2,
      2,
      {
        "SwitchCase": 1
      }
    ],
    // 驼峰，同时检查属性名
    "camelcase": [
      1,
      {
        "properties": "always"
      }
    ],
    // 引号，强制使用单引号
    "quotes": [
      2,
      "single",
      "avoid-escape"
    ],
    "brace-style": [
      2,
      "1tbs",
      {
        "allowSingleLine": false
      }
    ],
    // 逗号空格
    "comma-spacing": [
      2,
      {
        "before": false,
        "after": true
      }
    ],
    // 逗号风格
    "comma-style": [
      2,
      "last"
    ],
    // 最后留一行空行
    "eol-last": 0,
    // 是否所有函数必须命名
    "func-names": 0,
    // 类名首字母大写
    "new-cap": [2, {
        "newIsCap": true
      }
    ],
    // object 的 key value ：的前后空格
    "key-spacing": [1, {
        "beforeColon": false,
        "afterColon": true
      }
    ],
    // 表达式中是否允许多个空格
    "no-multi-spaces": [1, {
        exceptions: {
            "VariableDeclarator": true,
            "ImportDeclaration": true
        }
    }],
    // 是否允许多行空格
    "no-multiple-empty-lines": 0,
    // 是否禁止三目运算
    "no-nested-ternary": 0,
    // 禁止 new Object()
    "no-new-object": 2,
    // 函数与括号的空格
    "no-spaced-func": 2,
    // 是否允许末尾有空格
    "no-trailing-spaces": 0,
    // "no-wrap-func": 1, 禁止额外的括号
    "no-extra-parens": 1,
    // 允许任意使用下划线
    "no-underscore-dangle": 0,
    // 定义变量一行一个
    "one-var": [
      1,
      "never"
    ],
    // 块代码上下不能留空行
    "padded-blocks": [
      0,
      "never"
    ],
    // 校验分号
    "semi": 2,
    // 分号后面留空
    "semi-spacing": 1,
    // 关键词后面加空格
    "keyword-spacing": 2,
    // 块级代码加空格
    "space-before-blocks": 2,
    // 函数名与括弧之间空格
    "space-before-function-paren": [
      2,
      "never"
    ],
    // 操作符之间的空格
    "space-infix-ops": 2,
    // 注释斜线后面是否需要空格
    "spaced-comment": [
      1,
      "always",
      {
        "exceptions": [
          "*!+-"
        ]
      }
    ],

    /**
     * React JSX 规范
     */
    // 是否显示 Component 名称
    "react/display-name": 0,
    // 传递布尔值时是否明确支持
    "react/jsx-boolean-value": [
      1,
      "always"
    ],
    // jsx 属性值用双引号
    "jsx-quotes": [
      2,
      "prefer-double"
    ],
    // 判断 jsx 是否已经定义
    "react/jsx-no-undef": 1,
    // 是否排序 props
    "react/jsx-sort-props": 0,
    // 是否排序 prop types
    "react/jsx-sort-prop-types": 0,
    // 组件中中是否用了 react
    "react/jsx-uses-react": 2,
    // 定义了 jsx component 没有使用
    "react/jsx-uses-vars": 2,
    // 不要在 componentDidMount 里面设置 state
    // "react/no-did-mount-set-state": [
    //   0,
    //   "allow-in-func"
    // ],
    // 同上
    "react/no-did-update-set-state": 0,
    // 一个文件里面禁止声明多个 component
    "react/no-multi-comp": 0,
    // 检查 class、for 属性是否转义
    "react/no-unknown-property": 2,
    // 不强制设置 proptypes
    "react/prop-types": 0,
    // 查看 jsx 是否引入 react
    "react/react-in-jsx-scope": 1,
    // 检查是否有没有 children 的非子闭合标签
    "react/self-closing-comp": 2,
    // 不强制 return 的时候，结构的格式
    "react/wrap-multilines": 1,
    // 不强制 createClass 属性的排序
    "react/sort-comp": [
      0,
      {
        "order": [
          "lifecycle",
          "/^on.+$/",
          "/^(get|set)(?!(InitialState$|DefaultProps$|ChildContext$)).+$/",
          "everything-else",
          "/^render.+$/",
          "render"
        ]
      }
    ]
  },
  "extends": "eslint:recommended" //将按ECMAScript规范推荐的规则都merge进来
}
